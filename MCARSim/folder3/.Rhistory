#--------------------------------------------------------------------------
# This script is used to generate the simulated data with missing values
# Last updated date: 7/25/2017
#--------------------------------------------------------------------------
rm(list=ls())
set.seed(0311)
library(MASS) ##use function mvrnorm
library(LaplacesDemon) ##use function rcat
library(MCMCpack) ##use function rinvgamma, default rate=1
library(mvtnorm)  ##use function dmvnorm, rmvt
library(pscl)  ##use function rigamma
#library(metRology)  ##use function rt.scaled
library(BayesLogit) ##use rpg
library(coda)
library(LearnBayes)
#library(doParallel)
#---------------------------------
#      Global set-up
#---------------------------------
n=100 ##number of subject
K=4 ##number of latent classes
##assign each subject the number of tracked quarters
T=sample(5:40, size=n, replace=TRUE)
#--------------------------------------
#   Complete simulated data generation
#--------------------------------------
##set up true values of parameters
eta_sim=c(0, 0.5, 1.5, 1)
beta_sim=c(-0.4, 0.5)
M_sim=c(0, -0.6, 0.6, 1.2)
v_sim=c(0.5, -0.3)
sgmr2_sim=1                ##true value of variance of b_{i}
sgm2_sim=1                 ##true value of variance of epsilon_{it}
E_sim=1                    ##true value of variance of e_{i}
##generate time-invariate covariate V_{i}
V_sim=rnorm(n=n, mean=0, sd=1)
##simulate latent class c[i] for each subject
Pi_sim=exp(V_sim%o%eta_sim)
c_sim=apply(Pi_sim, 1, function(x) rcat(n=1, p=x/sum(x)))
##generate random effect b_{i}
b_sim=rnorm(n,mean=0, sd=sqrt(sgmr2_sim))
##set D_{i}, D^{*}_{i} and D^{**}_{i}
D=matrix(0, sum(T), 2)
D[,1]=rep(1,sum(T))
D[,2]=rep(V_sim,T)
D_star=vector(length=sum(T))
for(i in 1:n){
D_star[(sum(T[1:i])-T[i]+1):sum(T[1:i])]=1:T[i]
}
D_dstar=rep(1, sum(T))
##simulate X_{it}
BigM=rep(M_sim[c_sim],T)
Bigb=rep(b_sim, T)
X_sim=D%*%beta_sim+D_star*BigM+D_dstar*Bigb+rnorm(n=sum(T), mean=0, sd=sqrt(sgm2_sim))
##generate random effect e_{i}
e_sim=rnorm(n, mean=0, sd=sqrt(E_sim))
##generate y_{it}
BigVX=matrix(0, sum(T), 2)
BigVX[, 1]=rep(V_sim,T)
BigVX[, 2]=X_sim
top=exp(BigVX%*%v_sim+rep(e_sim,T))
bot=1+top
Y_sim=rbinom(n=sum(T), size=1, p=top/bot)
#--------------------------------
# SET MISSING VALUES: 20% MCAR
#--------------------------------
mr=0.2 ##missing rate
R_sim=rbinom(sum(T), 1, 1-mr)  ##R=0 represents missing
XR=data.frame(X=X_sim, R=R_sim)
XR
sample(c(1,2,3), 4, replace = FALSE)
sample(c(1,2,3), 4, replace = TRUE)
sample(c(1,2,3), 2, replace = TRUE)
sample(c(1,2,3), 5, replace = TRUE)
sum(R_sim==0)
X_sim[R_sim==0]
X_sim[R_sim==1]
which(R_sim==0)
head(XR)
XR[1:100,]
which(R_sim==0)
T
#--------------------------------------------------------------------------
# This script is used to generate the simulated data with missing values
# Last updated date: 7/25/2017
#--------------------------------------------------------------------------
rm(list=ls())
set.seed(0311)
library(MASS) ##use function mvrnorm
library(LaplacesDemon) ##use function rcat
library(MCMCpack) ##use function rinvgamma, default rate=1
library(mvtnorm)  ##use function dmvnorm, rmvt
library(pscl)  ##use function rigamma
#library(metRology)  ##use function rt.scaled
library(BayesLogit) ##use rpg
library(coda)
library(LearnBayes)
#library(doParallel)
#---------------------------------
#      Global set-up
#---------------------------------
n=100 ##number of subject
K=4 ##number of latent classes
##assign each subject the number of tracked quarters
T=sample(5:40, size=n, replace=TRUE)
#--------------------------------------
#   Complete simulated data generation
#--------------------------------------
##set up true values of parameters
eta_sim=c(0, 0.5, 1.5, 1)
beta_sim=c(-0.4, 0.5)
M_sim=c(0, -0.6, 0.6, 1.2)
v_sim=c(0.5, -0.3)
sgmr2_sim=1                ##true value of variance of b_{i}
sgm2_sim=1                 ##true value of variance of epsilon_{it}
E_sim=1                    ##true value of variance of e_{i}
##generate time-invariate covariate V_{i}
V_sim=rnorm(n=n, mean=0, sd=1)
##simulate latent class c[i] for each subject
Pi_sim=exp(V_sim%o%eta_sim)
c_sim=apply(Pi_sim, 1, function(x) rcat(n=1, p=x/sum(x)))
##generate random effect b_{i}
b_sim=rnorm(n,mean=0, sd=sqrt(sgmr2_sim))
##set D_{i}, D^{*}_{i} and D^{**}_{i}
D=matrix(0, sum(T), 2)
D[,1]=rep(1,sum(T))
D[,2]=rep(V_sim,T)
D_star=vector(length=sum(T))
for(i in 1:n){
D_star[(sum(T[1:i])-T[i]+1):sum(T[1:i])]=1:T[i]
}
D_dstar=rep(1, sum(T))
##simulate X_{it}
BigM=rep(M_sim[c_sim],T)
Bigb=rep(b_sim, T)
X_sim=D%*%beta_sim+D_star*BigM+D_dstar*Bigb+rnorm(n=sum(T), mean=0, sd=sqrt(sgm2_sim))
##generate random effect e_{i}
e_sim=rnorm(n, mean=0, sd=sqrt(E_sim))
##generate y_{it}
BigVX=matrix(0, sum(T), 2)
BigVX[, 1]=rep(V_sim,T)
BigVX[, 2]=X_sim
top=exp(BigVX%*%v_sim+rep(e_sim,T))
bot=1+top
Y_sim=rbinom(n=sum(T), size=1, p=top/bot)
#--------------------------------
# SET MISSING VALUES: 20% MCAR
#--------------------------------
mr=0.2 ##missing rate
R_sim=rbinom(sum(T), 1, 1-mr)  ##R=0 represents missing
XR=data.frame(Subject=rep(1:n, T), X=X_sim, R=R_sim)
XR
R_sim
which(XR$R==0)
which(XR$Subject==1)
T[1]
XR$X[XR$Subject==1]
head(XR)
XR$X[XR$Subject==1 & XR$R==1]
X_sim[XR$Subject==1 & XR$R==1]
XR$X[XR$Subject==1 & XR$R==1]-X_sim[XR$Subject==1 & XR$R==1]
X_sim[XR$Subject==1 & XR$R==0]
length(X_sim[XR$Subject==1 & XR$R==0])
#-----------------------------------------------------------
# This script is used to set initial values and update mcmc
# Last updated date: 7/25/2017
#------------------------------------------------------------
setwd("/Users/peterwang/Desktop/Research/missingdata/Project/code/MCARSim/folder3")
source("MCAR_data_generation_f3.R")
#------------
# PRIORS
#------------
beta_pri=10^{4}
M_pri=10^{4}
sgm2_pri=0.001
sgmr2_pri=0.001
v_pri=10^{4}
E_pri=0.001
eta_pri=10^{4}
#------------------------
# SET INITIAL VALUES
#------------------------
inits=list(eta=c(0, 0.2, 1.3, 0.7),
beta=c(-0.5, 0.8),
M=c(0, 0.5, 1.4, -0.4),
v=c(0.3, -1),
sgmr2=1.5^2,
sgm2=1.5^2,
E=1.5^2,
b=rnorm(n, mean=0, sd=1.5),             ##initial value of random effect b_{i}
e=rnorm(n, mean=0, sd=1.5)              ##initial value of random effect e_{i}
)
#impute initial missing value of X: randomly sample from the available observations
for (i in 1:n){
len=length(X_sim[XR$Subject==i & XR$R==0])
X_sim[XR$Subject==i & XR$R==0]=sample(X_sim[XR$Subject==i & XR$R==1], size = len, replace = TRUE )
}
head(XR)
head(X_sim)
head(R_sim)
XR[1:32,]
rnorm(n=32, mean=0, sd=1)
R_sim[T[1]]
R_sim[1:T[1]]
which(R_sim[1:T[1]]==0)
#--------------------------------------------------------------------------
# This script is used to generate the simulated data with missing values
# Last updated date: 7/25/2017
#--------------------------------------------------------------------------
rm(list=ls())
set.seed(0311)
library(MASS) ##use function mvrnorm
library(LaplacesDemon) ##use function rcat
library(MCMCpack) ##use function rinvgamma, default rate=1
library(mvtnorm)  ##use function dmvnorm, rmvt
library(pscl)  ##use function rigamma
library(BayesLogit) ##use rpg
library(coda)
library(LearnBayes)
#---------------------------------
#      Global set-up
#---------------------------------
n=100 ##number of subject
K=4 ##number of latent classes
##assign each subject the number of tracked quarters
T=sample(5:40, size=n, replace=TRUE)
#--------------------------------------
#   Complete simulated data generation
#--------------------------------------
##set up true values of parameters
eta_sim=c(0, 0.5, 1.5, 1)
beta_sim=c(-0.4, 0.5)
M_sim=c(0, -0.6, 0.6, 1.2)
v_sim=c(0.5, -0.3)
sgmr2_sim=1                ##true value of variance of b_{i}
sgm2_sim=1                 ##true value of variance of epsilon_{it}
E_sim=1                    ##true value of variance of e_{i}
##generate time-invariate covariate V_{i}
V_sim=rnorm(n=n, mean=0, sd=1)
##simulate latent class c[i] for each subject
Pi_sim=exp(V_sim%o%eta_sim)
c_sim=apply(Pi_sim, 1, function(x) rcat(n=1, p=x/sum(x)))
##generate random effect b_{i}
b_sim=rnorm(n,mean=0, sd=sqrt(sgmr2_sim))
##set D_{i}, D^{*}_{i} and D^{**}_{i}
D=matrix(0, sum(T), 2)
D[,1]=rep(1,sum(T))
D[,2]=rep(V_sim,T)
D_star=vector(length=sum(T))
for(i in 1:n){
D_star[(sum(T[1:i])-T[i]+1):sum(T[1:i])]=1:T[i]
}
D_dstar=rep(1, sum(T))
##simulate X_{it}
BigM=rep(M_sim[c_sim],T)
Bigb=rep(b_sim, T)
X_sim=D%*%beta_sim+D_star*BigM+D_dstar*Bigb+rnorm(n=sum(T), mean=0, sd=sqrt(sgm2_sim))
##generate random effect e_{i}
e_sim=rnorm(n, mean=0, sd=sqrt(E_sim))
##generate y_{it}
BigVX=matrix(0, sum(T), 2)
BigVX[, 1]=rep(V_sim,T)
BigVX[, 2]=X_sim
top=exp(BigVX%*%v_sim+rep(e_sim,T))
bot=1+top
Y_sim=rbinom(n=sum(T), size=1, p=top/bot)
#--------------------------------
# SET MISSING VALUES: 20% MCAR
#--------------------------------
mr=0.2 ##missing rate
R_sim=rbinom(sum(T), 1, 1-mr)  ##R=0 represents missing
XR=data.frame(Subject=rep(1:n, T), X=X_sim, R=R_sim) ##data frame
T
X_sim[1:34]
X_sim[34]-X_sim[1]
(X_sim[34]-X_sim[1])/34
c_sim
M_sim
(X_sim[34]-X_sim[1])/33
R_sim
R=R_sim
R
which(R==0)
T
which(R_sim==0 & XR$Subject==1)
which(R_sim==0 & XR$Subject==2)
aa=which(R_sim==0 & XR$Subject==1)
aa
diff(aa)
aaa=c(1,2,4,5,6,8,10)
aaa
diff(aaa)
bb=diff(aaa)
which(R_sim==1 & XR$Subject==1)
install.packages("imputeTS")
library(imputeTS)
na.interpolation
install.packages("forecast")
library(forecast)
