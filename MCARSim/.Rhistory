for(i in 1:n){
Pi_c[i, ]=prop.table(Pi_c[i,])
}
for(i in 1:n){
for (l in 1:K){
pos=(sum(T[1:i])-T[i]+1):sum(T[1:i])
f_c[i,l]=dmvnorm(X[pos], mean=D[pos,]%*%beta+D_star[pos]*M[l]+D_dstar[pos]*b[i],
sigma=sgm2*diag(T[i]) )
}
}
for(i in 1:n){
prob=(Pi_c*f_c)[i, ]
if (all(prob==0) ){
c[i]=rcat(n=1, p=rep(1/K, K))
} else {
c[i]=rcat(n=1, p=prob/sum(prob) )
}
}
##sample beta
BigM=rep(M[c],T)
Bigb=rep(b, T)
sum_beta=crossprod(D, X-D_star*BigM-D_dstar*Bigb)
var_beta=solve((1/beta_pri)*diag(2)+(1/sgm2)*crossD)
mean_beta=(1/sgm2)*(var_beta%*%sum_beta)
beta=mvrnorm(n=1, mu=mean_beta, Sigma = var_beta)
##sample M2, M3 and M4
for(l in 2:K){
c_index=rep(0, n)
index=which(c==l)
c_index[index]=1
var_M=((1/M_pri)+(1/sgm2)*sum((D_star*rep(c_index,T))^2))^{-1}
mean_M=(1/sgm2)*var_M*sum((D_star*(X-D%*%beta-D_dstar*Bigb))*rep(c_index,T))
M[l]=rnorm(1, mean=mean_M, sd=sqrt(var_M))
}
BigM
BigM=rep(M[c], T)
BigM
i=1
b_index=c(rep(0,i-1),1,rep(0, n-i))
b_index
i=10
b_index=c(rep(0,i-1),1,rep(0, n-i))
b_index
i=n
b_index=c(rep(0,i-1),1,rep(0, n-i))
b_index
l=2
index_eta=ifelse(c[i]==l,1,0)
index_eta
#------------------------------------------------
# BAYESIAN METHOD SIMULATIOIN WITH MISSING DATA
# Last updated date: 7/15/2017
#-------------------------------------------------
setwd("/Users/peterwang/Desktop/Research/missingdata/Project/code/MCARSim")
source("data_generation.R")
#------------------------
# SET INITIAL VALUES
#------------------------
inits=list(eta=c(0, 0.5, 1.3, 1),
beta=c(-0.5, 0.8),
M=c(0, 0.5, 1.4, -0.4),
v=c(0.3, -1),
sgmr2=1.5^2,
sgm2=1.5^2,
E=1.5^2,
b=rnorm(n, mean=0, sd=1.5),             ##initial value of random effect b_{i}
e=rnorm(n, mean=0, sd=1.5)              ##initial value of random effect e_{i}
)
#set initial latent class for each subject
Pi_ini=exp(V_sim%*%t(inits$eta))
c_ini=apply(Pi_ini, 1, function(x) rcat(n=1, p=x))
#impute initial missing value of X:
#use initial values of relevant parameters in sub-model 2
BigM=rep(inits$M[c_ini],T)
Bigb=rep(inits$b, T)
X_sim[R_sim==0]=D[R_sim==0, ]%*%(inits$beta)+
D_star[R_sim==0]*BigM[R_sim==0]+
D_dstar[R_sim==0]*Bigb[R_sim==0]+
rnorm(n=sum(R_sim==0), mean=0, sd=sqrt(inits$sgm2))
#-----------------------
#   SET-UP OF ITERATION
#-----------------------
#number of iterations
n_iter=10000
##variable names in the iteration
eta=inits$eta
v=inits$v
beta=inits$beta
M=inits$M
sgmr2=inits$sgmr2
sgm2=inits$sgm2
E=inits$E
c=c_ini
b=inits$b
e=inits$e
X=X_sim
##recording structure, each row is one iteration
eta_keep=matrix(0, nrow=n_iter, ncol=K)
v_keep=matrix(0, nrow=n_iter, ncol=2)
beta_keep=matrix(0, nrow=n_iter, ncol=2)
M_keep=matrix(0, nrow=n_iter, ncol=K)
sgmr2_keep=rep(0, n_iter)
sgm2_keep=rep(0, n_iter)
E_keep=rep(0, n_iter)
c_keep=matrix(0, nrow=n_iter, ncol=n)
b_keep=matrix(0, nrow=n_iter, ncol=n)
e_keep=matrix(0, nrow=n_iter, ncol=n)
Pi_c=matrix(0, n, K)        ## for updating c
f_c=matrix(0,n, K)          ## for updating c
crossD=crossprod(D)         ## t(D)%*%D for updating beta
PG_eta=matrix(0, n, K-1)    ## for w_{il} in updating eta_{l}
k_eta=matrix(0, n, K-1)     ## for k_{l} in updating eta_{l}
omega_v=rep(0, sum(T))      ##for updating v
##sample c_{i} for all i
Pi_c=exp(V_sim%*%t(eta))
for(i in 1:n){
Pi_c[i, ]=prop.table(Pi_c[i,])
}
for(i in 1:n){
for (l in 1:K){
pos=(sum(T[1:i])-T[i]+1):sum(T[1:i])
f_c[i,l]=dmvnorm(X[pos], mean=D[pos,]%*%beta+D_star[pos]*M[l]+D_dstar[pos]*b[i],
sigma=sgm2*diag(T[i]) )
}
}
for(i in 1:n){
prob=(Pi_c*f_c)[i, ]
if (all(prob==0) ){
c[i]=rcat(n=1, p=rep(1/K, K))
} else {
c[i]=rcat(n=1, p=prob/sum(prob) )
}
}
##sample beta
BigM=rep(M[c],T)
Bigb=rep(b, T)
sum_beta=crossprod(D, X-D_star*BigM-D_dstar*Bigb)
var_beta=solve((1/beta_pri)*diag(2)+(1/sgm2)*crossD)
mean_beta=(1/sgm2)*(var_beta%*%sum_beta)
beta=mvrnorm(n=1, mu=mean_beta, Sigma = var_beta)
##sample M2, M3 and M4
for(l in 2:K){
c_index=rep(0, n)
index=which(c==l)
c_index[index]=1
var_M=((1/M_pri)+(1/sgm2)*sum((D_star*rep(c_index,T))^2))^{-1}
mean_M=(1/sgm2)*var_M*sum((D_star*(X-D%*%beta-D_dstar*Bigb))*rep(c_index,T))
M[l]=rnorm(1, mean=mean_M, sd=sqrt(var_M))
}
##sample sigma^{2}
BigM=rep(M[c], T)
sum_sgm2=sum((X-D%*%beta-D_star*BigM-D_dstar*Bigb)^2)
shape_sgm2=(1/2)*sum(T)+sgm2_pri
scale_sgm2=(1/2)*sum_sgm2+sgm2_pri
sgm2=rigamma(n=1, a=shape_sgm2, b=scale_sgm2)
##sample sigma_{r}^{2}
sgmr2=rigamma(n=1, a=(n/2)+sgmr2_pri, b=(1/2)*sum(b^{2})+sgmr2_pri)
##sample b[i]
for (i in 1:n){
b_index=c(rep(0,i-1),1,rep(0, n-i))
var_b=((1/sgmr2)+(1/sgm2)*T[i])^{-1}
mean_b=(1/sgm2)*var_b*sum((X-D%*%beta-D_star*BigM)*rep(b_index,T))
b[i]=rnorm(1, mean=mean_b, sd=sqrt(var_b))
}
##sample E
E=rigamma(n=1, a=n/2+E_pri, b=(1/2)*sum(e^{2})+E_pri)
crossprod(c(1,2),c(3,4))
t(c(1,2,))%*%c(3,4)
t(c(1,2))%*%c(3,4)
for(l in 2:K){
for(i in 1:n){
tilting_eta=V_sim[i]*eta[l]-log(sum(exp(V_sim[i]*eta[-l])) )
PG_eta[i,l-1]=rpg(num=1, h=1, z=tilting_eta)  ## sample w_{il}
index_eta=ifelse(c[i]==l,1,0)
k_eta[i,l-1]=index_eta-1/2+PG_eta[i,l-1]*log(sum(exp(V_sim[i]*eta[-l])))
}
S_eta=(1/eta_pri+t(V_sim)%*%diag(PG_eta[,l-1])%*%V_sim)^{-1}
m_eta=S_eta*crossprod(V_sim, k_eta[ ,l-1])
eta[l]=rnorm(n=1,mean=m_eta, sd=sqrt(S_eta))
}
eta
BigVX
BigVX[, 2]=X
tilting_v=BigVX%*%v+rep(e,T)
for (i in 1:sum(T)){
omega_v[i]=rpg(num=1, h=1, z=tilting_v[i]) ## sample w_{it}^{*}
##how does rpg sample when h and z are vectors? If this is known, then the above line can be modified.
}
k_v=Y_sim-omega_v*rep(e, T)-1/2
S_v=solve((1/v_pri)*diag(2)+crossprod(BigVX,diag(omega_v))%*%BigVX )
m_v=S_v%*%crossprod(BigVX,k_v)
v=mvrnorm(n=1, mu=m_v, Sigma = S_v)
v
#------------------------------------------------
# BAYESIAN METHOD SIMULATIOIN WITH MISSING DATA
# Last updated date: 7/15/2017
#-------------------------------------------------
setwd("/Users/peterwang/Desktop/Research/missingdata/Project/code/MCARSim")
source("data_generation.R")
#------------------------
# SET INITIAL VALUES
#------------------------
inits=list(eta=c(0, 0.5, 1.3, 1),
beta=c(-0.5, 0.8),
M=c(0, 0.5, 1.4, -0.4),
v=c(0.3, -1),
sgmr2=1.5^2,
sgm2=1.5^2,
E=1.5^2,
b=rnorm(n, mean=0, sd=1.5),             ##initial value of random effect b_{i}
e=rnorm(n, mean=0, sd=1.5)              ##initial value of random effect e_{i}
)
#set initial latent class for each subject
Pi_ini=exp(V_sim%*%t(inits$eta))
c_ini=apply(Pi_ini, 1, function(x) rcat(n=1, p=x))
#impute initial missing value of X:
#use initial values of relevant parameters in sub-model 2
BigM=rep(inits$M[c_ini],T)
Bigb=rep(inits$b, T)
X_sim[R_sim==0]=D[R_sim==0, ]%*%(inits$beta)+
D_star[R_sim==0]*BigM[R_sim==0]+
D_dstar[R_sim==0]*Bigb[R_sim==0]+
rnorm(n=sum(R_sim==0), mean=0, sd=sqrt(inits$sgm2))
#-----------------------
#   SET-UP OF ITERATION
#-----------------------
#number of iterations
n_iter=10000
##variable names in the iteration
eta=inits$eta
v=inits$v
beta=inits$beta
M=inits$M
sgmr2=inits$sgmr2
sgm2=inits$sgm2
E=inits$E
c=c_ini
b=inits$b
e=inits$e
X=X_sim
##recording structure, each row is one iteration
eta_keep=matrix(0, nrow=n_iter, ncol=K)
v_keep=matrix(0, nrow=n_iter, ncol=2)
beta_keep=matrix(0, nrow=n_iter, ncol=2)
M_keep=matrix(0, nrow=n_iter, ncol=K)
sgmr2_keep=rep(0, n_iter)
sgm2_keep=rep(0, n_iter)
E_keep=rep(0, n_iter)
c_keep=matrix(0, nrow=n_iter, ncol=n)
b_keep=matrix(0, nrow=n_iter, ncol=n)
e_keep=matrix(0, nrow=n_iter, ncol=n)
Pi_c=matrix(0, n, K)        ## for updating c
f_c=matrix(0,n, K)          ## for updating c
crossD=crossprod(D)         ## t(D)%*%D for updating beta
PG_eta=matrix(0, n, K-1)    ## for w_{il} in updating eta_{l}
k_eta=matrix(0, n, K-1)     ## for k_{l} in updating eta_{l}
omega_v=rep(0, sum(T))      ##for updating v
##sample c_{i} for all i
Pi_c=exp(V_sim%*%t(eta))
for(i in 1:n){
Pi_c[i, ]=prop.table(Pi_c[i,])
}
for(i in 1:n){
for (l in 1:K){
pos=(sum(T[1:i])-T[i]+1):sum(T[1:i])
f_c[i,l]=dmvnorm(X[pos], mean=D[pos,]%*%beta+D_star[pos]*M[l]+D_dstar[pos]*b[i],
sigma=sgm2*diag(T[i]) )
}
}
for(i in 1:n){
prob=(Pi_c*f_c)[i, ]
if (all(prob==0) ){
c[i]=rcat(n=1, p=rep(1/K, K))
} else {
c[i]=rcat(n=1, p=prob/sum(prob) )
}
}
##sample beta
BigM=rep(M[c],T)
Bigb=rep(b, T)
sum_beta=crossprod(D, X-D_star*BigM-D_dstar*Bigb)
var_beta=solve((1/beta_pri)*diag(2)+(1/sgm2)*crossD)
mean_beta=(1/sgm2)*(var_beta%*%sum_beta)
beta=mvrnorm(n=1, mu=mean_beta, Sigma = var_beta)
##sample M2, M3 and M4
for(l in 2:K){
c_index=rep(0, n)
index=which(c==l)
c_index[index]=1
var_M=((1/M_pri)+(1/sgm2)*sum((D_star*rep(c_index,T))^2))^{-1}
mean_M=(1/sgm2)*var_M*sum((D_star*(X-D%*%beta-D_dstar*Bigb))*rep(c_index,T))
M[l]=rnorm(1, mean=mean_M, sd=sqrt(var_M))
}
##sample sigma^{2}
BigM=rep(M[c], T)
sum_sgm2=sum((X-D%*%beta-D_star*BigM-D_dstar*Bigb)^2)
shape_sgm2=(1/2)*sum(T)+sgm2_pri
scale_sgm2=(1/2)*sum_sgm2+sgm2_pri
sgm2=rigamma(n=1, a=shape_sgm2, b=scale_sgm2)
##sample sigma_{r}^{2}
sgmr2=rigamma(n=1, a=(n/2)+sgmr2_pri, b=(1/2)*sum(b^{2})+sgmr2_pri)
##sample b[i]
for (i in 1:n){
b_index=c(rep(0,i-1),1,rep(0, n-i))
var_b=((1/sgmr2)+(1/sgm2)*T[i])^{-1}
mean_b=(1/sgm2)*var_b*sum((X-D%*%beta-D_star*BigM)*rep(b_index,T))
b[i]=rnorm(1, mean=mean_b, sd=sqrt(var_b))
}
##sample E
E=rigamma(n=1, a=n/2+E_pri, b=(1/2)*sum(e^{2})+E_pri)
##sample eta2, eta3 and eta4
for(l in 2:K){
for(i in 1:n){
tilting_eta=V_sim[i]*eta[l]-log(sum(exp(V_sim[i]*eta[-l])) )
PG_eta[i,l-1]=rpg(num=1, h=1, z=tilting_eta)  ## sample w_{il}
index_eta=ifelse(c[i]==l,1,0)
k_eta[i,l-1]=index_eta-1/2+PG_eta[i,l-1]*log(sum(exp(V_sim[i]*eta[-l])))
}
S_eta=(1/eta_pri+t(V_sim)%*%diag(PG_eta[,l-1])%*%V_sim)^{-1}
m_eta=S_eta*crossprod(V_sim, k_eta[ ,l-1])
eta[l]=rnorm(n=1,mean=m_eta, sd=sqrt(S_eta))
}
##sample v
BigVX[, 2]=X
tilting_v=BigVX%*%v+rep(e,T)
for (i in 1:sum(T)){
omega_v[i]=rpg(num=1, h=1, z=tilting_v[i]) ## sample w_{it}^{*}
##how does rpg sample when h and z are vectors? If this is known, then the above line can be modified.
}
k_v=Y_sim-omega_v*rep(e, T)-1/2
S_v=solve((1/v_pri)*diag(2)+crossprod(BigVX,diag(omega_v))%*%BigVX )
m_v=S_v%*%crossprod(BigVX,k_v)
v=mvrnorm(n=1, mu=m_v, Sigma = S_v)
##sample e_{i}
for(i in 1:n){
e_index=c(rep(0,i-1),1,rep(0, n-i))
S_e=((1/E)+sum(omega_v*rep(e_index, T)))^{-1}
m_e=S_e*sum((Y_sim-omega_v*(BigVX%*%v)-1/2)*rep(e_index, T))
e[i]=rnorm(n=1, mean=m_e, sd=sqrt(S_e))
}
BigM
BigM=rep(M[c],T)
BigM
#------------------------------------------------
# BAYESIAN METHOD SIMULATIOIN WITH MISSING DATA
# Last updated date: 7/15/2017
#-------------------------------------------------
setwd("/Users/peterwang/Desktop/Research/missingdata/Project/code/MCARSim")
source("data_generation.R")
#------------------------
# SET INITIAL VALUES
#------------------------
inits=list(eta=c(0, 0.5, 1.3, 1),
beta=c(-0.5, 0.8),
M=c(0, 0.5, 1.4, -0.4),
v=c(0.3, -1),
sgmr2=1.5^2,
sgm2=1.5^2,
E=1.5^2,
b=rnorm(n, mean=0, sd=1.5),             ##initial value of random effect b_{i}
e=rnorm(n, mean=0, sd=1.5)              ##initial value of random effect e_{i}
)
#set initial latent class for each subject
Pi_ini=exp(V_sim%*%t(inits$eta))
c_ini=apply(Pi_ini, 1, function(x) rcat(n=1, p=x))
#impute initial missing value of X:
#use initial values of relevant parameters in sub-model 2
BigM=rep(inits$M[c_ini],T)
Bigb=rep(inits$b, T)
X_sim[R_sim==0]=D[R_sim==0, ]%*%(inits$beta)+
D_star[R_sim==0]*BigM[R_sim==0]+
D_dstar[R_sim==0]*Bigb[R_sim==0]+
rnorm(n=sum(R_sim==0), mean=0, sd=sqrt(inits$sgm2))
#-----------------------
#   SET-UP OF ITERATION
#-----------------------
#number of iterations
n_iter=3
##variable names in the iteration
eta=inits$eta
v=inits$v
beta=inits$beta
M=inits$M
sgmr2=inits$sgmr2
sgm2=inits$sgm2
E=inits$E
c=c_ini
b=inits$b
e=inits$e
X=X_sim
##recording structure, each row is one iteration
eta_keep=matrix(0, nrow=n_iter, ncol=K)
v_keep=matrix(0, nrow=n_iter, ncol=2)
beta_keep=matrix(0, nrow=n_iter, ncol=2)
M_keep=matrix(0, nrow=n_iter, ncol=K)
sgmr2_keep=rep(0, n_iter)
sgm2_keep=rep(0, n_iter)
E_keep=rep(0, n_iter)
c_keep=matrix(0, nrow=n_iter, ncol=n)
b_keep=matrix(0, nrow=n_iter, ncol=n)
e_keep=matrix(0, nrow=n_iter, ncol=n)
Pi_c=matrix(0, n, K)        ## for updating c
f_c=matrix(0,n, K)          ## for updating c
crossD=crossprod(D)         ## t(D)%*%D for updating beta
PG_eta=matrix(0, n, K-1)    ## for w_{il} in updating eta_{l}
k_eta=matrix(0, n, K-1)     ## for k_{l} in updating eta_{l}
omega_v=rep(0, sum(T))      ##for updating v
#------------------
# RUN ITERATIONS
#------------------
for (m in 1:n_iter){
##sample c_{i} for all i
Pi_c=exp(V_sim%*%t(eta))
for(i in 1:n){
Pi_c[i, ]=prop.table(Pi_c[i,])
}
for(i in 1:n){
for (l in 1:K){
pos=(sum(T[1:i])-T[i]+1):sum(T[1:i])
f_c[i,l]=dmvnorm(X[pos], mean=D[pos,]%*%beta+D_star[pos]*M[l]+D_dstar[pos]*b[i],
sigma=sgm2*diag(T[i]) )
}
}
for(i in 1:n){
prob=(Pi_c*f_c)[i, ]
if (all(prob==0) ){
c[i]=rcat(n=1, p=rep(1/K, K))
} else {
c[i]=rcat(n=1, p=prob/sum(prob) )
}
}
##sample beta
BigM=rep(M[c],T)
Bigb=rep(b, T)
sum_beta=crossprod(D, X-D_star*BigM-D_dstar*Bigb)
var_beta=solve((1/beta_pri)*diag(2)+(1/sgm2)*crossD)
mean_beta=(1/sgm2)*(var_beta%*%sum_beta)
beta=mvrnorm(n=1, mu=mean_beta, Sigma = var_beta)
##sample M2, M3 and M4
for(l in 2:K){
c_index=rep(0, n)
index=which(c==l)
c_index[index]=1
var_M=((1/M_pri)+(1/sgm2)*sum((D_star*rep(c_index,T))^2))^{-1}
mean_M=(1/sgm2)*var_M*sum((D_star*(X-D%*%beta-D_dstar*Bigb))*rep(c_index,T))
M[l]=rnorm(1, mean=mean_M, sd=sqrt(var_M))
}
##sample sigma^{2}
BigM=rep(M[c], T)
sum_sgm2=sum((X-D%*%beta-D_star*BigM-D_dstar*Bigb)^2)
shape_sgm2=(1/2)*sum(T)+sgm2_pri
scale_sgm2=(1/2)*sum_sgm2+sgm2_pri
sgm2=rigamma(n=1, a=shape_sgm2, b=scale_sgm2)
##sample sigma_{r}^{2}
sgmr2=rigamma(n=1, a=(n/2)+sgmr2_pri, b=(1/2)*sum(b^{2})+sgmr2_pri)
##sample b[i]
for (i in 1:n){
b_index=c(rep(0,i-1),1,rep(0, n-i))
var_b=((1/sgmr2)+(1/sgm2)*T[i])^{-1}
mean_b=(1/sgm2)*var_b*sum((X-D%*%beta-D_star*BigM)*rep(b_index,T))
b[i]=rnorm(1, mean=mean_b, sd=sqrt(var_b))
}
##sample E
E=rigamma(n=1, a=n/2+E_pri, b=(1/2)*sum(e^{2})+E_pri)
##sample eta2, eta3 and eta4
for(l in 2:K){
for(i in 1:n){
tilting_eta=V_sim[i]*eta[l]-log(sum(exp(V_sim[i]*eta[-l])) )
PG_eta[i,l-1]=rpg(num=1, h=1, z=tilting_eta)  ## sample w_{il}
index_eta=ifelse(c[i]==l,1,0)
k_eta[i,l-1]=index_eta-1/2+PG_eta[i,l-1]*log(sum(exp(V_sim[i]*eta[-l])))
}
S_eta=(1/eta_pri+t(V_sim)%*%diag(PG_eta[,l-1])%*%V_sim)^{-1}
m_eta=S_eta*crossprod(V_sim, k_eta[ ,l-1])
eta[l]=rnorm(n=1,mean=m_eta, sd=sqrt(S_eta))
}
##sample v
BigVX[, 2]=X
tilting_v=BigVX%*%v+rep(e,T)
for (i in 1:sum(T)){
omega_v[i]=rpg(num=1, h=1, z=tilting_v[i]) ## sample w_{it}^{*}
##how does rpg sample when h and z are vectors? If this is known, then the above line can be modified.
}
k_v=Y_sim-omega_v*rep(e, T)-1/2
S_v=solve((1/v_pri)*diag(2)+crossprod(BigVX,diag(omega_v))%*%BigVX )
m_v=S_v%*%crossprod(BigVX,k_v)
v=mvrnorm(n=1, mu=m_v, Sigma = S_v)
##sample e_{i}
for(i in 1:n){
e_index=c(rep(0,i-1),1,rep(0, n-i))
S_e=((1/E)+sum(omega_v*rep(e_index, T)))^{-1}
m_e=S_e*sum((Y_sim-omega_v*(BigVX%*%v)-1/2)*rep(e_index, T))
e[i]=rnorm(n=1, mean=m_e, sd=sqrt(S_e))
}
##impute missing data
Bigb=rep(b, T)
X[R_sim==0]=D[R_sim==0, ]%*%beta+
D_star[R_sim==0]*BigM[R_sim==0]+
D_dstar[R_sim==0]*Bigb[R_sim==0]+
rnorm(n=sum(R_sim==0), mean=0, sd=sqrt(sgm2))
##record parameters
c_keep[m, ]=c
b_keep[m, ]=b
e_keep[m, ]=e
eta_keep[m,]=eta
v_keep[m, ]=v
beta_keep[m, ]=beta
M_keep[m, ]=M
sgmr2_keep[m]=sgmr2
sgm2_keep[m]=sgm2
E_keep[m]=E
} ##iteration ends
